*Day 25 of 30* 🗓️

*Problem* : Check if a Binary Tree is a Binary Search Tree (BST)
You are given the root of a binary tree. Your task is to determine whether the tree is a valid Binary Search Tree (BST)

*Input* :
* A binary tree represented by its root node.
* Input: root = [2, 1, 3]

*Output* :
Return true if the binary tree is a valid BST, otherwise return false.
Output: true


#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

// Definition for a binary tree node
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
};

// Helper function
int isValid(struct TreeNode* root, long min, long max) {
    if (root == NULL) return 1;

    if (root->val <= min || root->val >= max)
        return 0;

    return isValid(root->left, min, root->val) &&
           isValid(root->right, root->val, max);
}

// Main function
int isValidBST(struct TreeNode* root) {
    return isValid(root, LONG_MIN, LONG_MAX);
}
